## to recreate the four line plots in fig 2:

library(tidyverse)
setwd("C:/Users/mstreis/Desktop/somatic_mutation_mim_aur")
a1 <- read.table("A1_final_data.txt", header=TRUE, na.string="NA")
a2 <- read.table("A2_final_data.txt", header=TRUE, na.string="NA")
c1 <- read.table("C1_final_data.txt", header=TRUE, na.string="NA")
c2 <- read.table("C2_final_data.txt", header=TRUE, na.string="NA")


## scale data so it is mean = 0, stdev = 1
numeric_cols <- c('days_to_germinate', 'growth_rate_day', 'drought_b', 'survival_time', 'biomass')
a1_scaled <- a1 %>%
  mutate(across(all_of(numeric_cols), scale))

a2_scaled <- a2 %>%
  mutate(across(all_of(numeric_cols), scale))

c1_scaled <- c1 %>%
  mutate(across(all_of(numeric_cols), scale))
  
c2_scaled <- c2 %>%
  mutate(across(all_of(numeric_cols), scale))


## take inverse of growth rate and biomass  
a1_scaled$growth_inverse <- -1*(a1_scaled$growth_rate_day)
a1_scaled$biomass_inverse <- -1*(a1_scaled$biomass)

a2_scaled$growth_inverse <- -1*(a2_scaled$growth_rate_day)
a2_scaled$biomass_inverse <- -1*(a2_scaled$biomass)

c1_scaled$growth_inverse <- -1*(c1_scaled$growth_rate_day)
c1_scaled$biomass_inverse <- -1*(c1_scaled$biomass)

c2_scaled$growth_inverse <- -1*(c2_scaled$growth_rate_day)
c2_scaled$biomass_inverse <- -1*(c2_scaled$biomass)

# Define the order of variables
variable_order <- c("days_to_germinate", "growth_inverse", "drought_b", "survival_time", "biomass_inverse")

# Calculate mean values for each dataframe
mean_values_a1_scaled <- aggregate(a1_scaled[, variable_order], by = list(cross = a1_scaled$cross), mean, na.rm = TRUE)
mean_values_a2_scaled <- aggregate(a2_scaled[, variable_order], by = list(cross = a2_scaled$cross), mean, na.rm = TRUE)
mean_values_c1_scaled <- aggregate(c1_scaled[, variable_order], by = list(cross = c1_scaled$cross), mean, na.rm = TRUE)
mean_values_c2_scaled <- aggregate(c2_scaled[, variable_order], by = list(cross = c2_scaled$cross), mean, na.rm = TRUE)

# Calculate the overall range of mean values across all datasets
overall_yrange <- range(c(
  as.matrix(mean_values_a1_scaled[, variable_order]),
  as.matrix(mean_values_a2_scaled[, variable_order]),
  as.matrix(mean_values_c1_scaled[, variable_order]),
  as.matrix(mean_values_c2_scaled[, variable_order])
))

# Function to generate the plot for mean A and mean G
plot_means <- function(mean_values, main_title) {
  # Create a line plot connecting points for Mean A and Mean G
  matplot(x = seq_along(variable_order),
          y = t(as.matrix(mean_values[, variable_order])),
          type = "l", lty = 1, col = c("green", "orange"),
          lwd = c(2, 2),
          xlab = "Variable", ylab = "Mean Value", main = main_title, ylim = overall_yrange)
  # Set x-axis tick labels
  axis(1, at = seq_along(variable_order), labels = variable_order)

  # Add legend
  #legend("topright", legend = c("Mean A", "Mean G"), 
  #       col = c("green", "orange"), 
  #       lty = c(1, 1), 
  #       lwd = c(2, 2))
}



plot_points <- function(mean_values, main_title) {
  # Create a line plot connecting points for Mean A and Mean G
  matplot(x = seq_along(variable_order),
          y = t(as.matrix(mean_values[, variable_order])),
          type = "l", lty = 1, col = c("green", "orange"),
          lwd = c(2, 2),
          xlab = "Variable", ylab = "Mean Value", main = main_title, ylim = overall_yrange)
  # Set x-axis tick labels
  axis(1, at = seq_along(variable_order), labels = variable_order)

  # Add legend
  #legend("topright", legend = c("Mean A", "Mean G"), 
  #       col = c("green", "orange"), 
  #       lty = c(1, 1), 
  #       lwd = c(2, 2))
}




# Set up a 2x2 layout
layout(matrix(1:4, nrow = 2, byrow = TRUE))

# Plot means for a1_scaled
plot_means(mean_values_a1_scaled, "Dataset: a1_scaled")

# Plot means for a2_scaled
plot_means(mean_values_a2_scaled, "Dataset: a2_scaled")

# Plot means for c1_scaled
plot_means(mean_values_c1_scaled, "Dataset: c1_scaled")

# Plot means for c2_scaled
plot_means(mean_values_c2_scaled, "Dataset: c2_scaled")
